name: Test Sync Workflow

on:
  workflow_dispatch:

env:
  WORKFLOW_NAME: "Sync Fork with Upstream Releases" # The name of the main workflow to be triggered

jobs:
  test-sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

      - name: Create annotated mock tags
        id: create_tags
        run: |
          # Create first tag
          TAG_NAME1="mock-tag-$(date +%s)"
          echo "PREVIOUS_TAG=$TAG_NAME1" >> $GITHUB_ENV
          git tag $TAG_NAME1
          
          # Small delay to ensure different timestamps
          sleep 2
          
          # Create second tag
          TAG_NAME2="mock-tag-$(date +%s)"
          echo "LATEST_TAG=$TAG_NAME2" >> $GITHUB_ENV
          git tag $TAG_NAME2
          
          # Push both tags
          git push origin $TAG_NAME1
          git push origin $TAG_NAME2

      - name: Dispatch main workflow
        id: trigger_main_workflow
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          UPSTREAM_URL="https://github.com/${GITHUB_REPOSITORY}"
          TAG_NAME="${{ env.LATEST_TAG }}"
          echo "{ \"event_type\": \"test-sync\", \"client_payload\": { \"tag\": \"${TAG_NAME}\", \"upstream_url\": \"${UPSTREAM_URL}\" }}" > payload.json
          gh api \
            --method POST \
            /repos/${GITHUB_REPOSITORY}/dispatches \
            --input payload.json
          rm -f payload.json

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Poll main workflow status
        id: poll_status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pip install PyGithub
          python .github/scripts/poll_workflow.py "${{ env.WORKFLOW_NAME }}" "${{ github.repository }}"
          
      - name: Cleanup tags and branches
        if: always()
        run: |
          # Reset test patch file
          git checkout main
          echo "No patch applied" > .github/test/test-patch.md || true
          git add .github/test/test-patch.md || true
          git config --global user.name 'GitHub Actions' || true
          git config --global user.email 'actions@github.com' || true
          git commit -m "test: reset test patch file" || true
          git push origin main || true
          
          # Cleanup both tags and their branches
          PREVIOUS_TAG="${{ env.PREVIOUS_TAG }}"
          LATEST_TAG="${{ env.LATEST_TAG }}"
          
          # Delete tags
          git push origin :refs/tags/$PREVIOUS_TAG || true
          git push origin :refs/tags/$LATEST_TAG || true
          
          # Delete branches
          git branch -D sync-$PREVIOUS_TAG || true
          git branch -D sync-$LATEST_TAG || true
          git push origin --delete sync-$PREVIOUS_TAG || true
          git push origin --delete sync-$LATEST_TAG || true